/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "API Documentation for proEQUIB";
subtitle = "IDL Library for Plasma Diagnostics and Abundance Analysis";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("./calc_abund_c_ii_rl.html", "calc_abund_c_ii_rl.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "calc_abund_c_ii_rl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./calc_abund_c_ii_rl.html#calc_abund_c_ii_rl", "calc_abund_c_ii_rl", 'routine in <a href="./calc_abund_c_ii_rl.html">calc_abund_c_ii_rl.pro</a>', "calc_abund_c_ii_rl.pro", "   Ashkbiz Danehkar   ", "calc_abund_c_ii_rl", "     This function determines the ionic abundance from the observed      flux intensity for the given wavelength of C II recombination line      by using the recombination coefficients from      from Davey et al. (2000) 2000A&AS..142...85D.   ", "temperature                         electron temperature  density                         electron density  wavelength                         Line Wavelength in Angstrom  line_flux                         line flux intensity  c_ii_rc_data                         C II recombination coefficients  h_i_aeff_data                         H I recombination coefficients   ", "Abundance Analysis Recombination Lines", "   0.0.3        Based on recombination coefficients for C II lines from      Davey et al. 2000A&AS..142...85D.       Adopted from MOCASSIN, Ercolano et al. 2005MNRAS.362.1038E.       02/2003, Yong Zhang, added to MOCASSIN.       10/05/2013, A. Danehkar, Translated to IDL code.       15/04/2017, A. Danehkar, Integration with AtomNeb.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_All_file= filepath('rc_collection.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> Atom_RC_SH95_file= filepath('rc_SH95.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> h_i_rc_data=atomneb_read_aeff_sh95(Atom_RC_SH95_file, atom, ion) <span class= code-prompt >IDL&gt;</span> h_i_aeff_data=h_i_rc_data[0].Aeff <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' ; C II <span class= code-prompt >IDL&gt;</span> c_ii_rc_data=atomneb_read_aeff_collection(Atom_RC_All_file, atom, ion) <span class= code-prompt >IDL&gt;</span> temperature=double(10000.0) <span class= code-prompt >IDL&gt;</span> density=double(5000.0) <span class= code-prompt >IDL&gt;</span> c_ii_6151_flux = 0.028 <span class= code-prompt >IDL&gt;</span> wavelength=6151.43 <span class= code-prompt >IDL&gt;</span> Abund_c_ii=calc_abund_c_ii_rl(temperature=temperature, density=density, $ <span class= code-prompt >IDL&gt;</span>                               wavelength=wavelength, line_flux=c_ii_6151_flux, $ <span class= code-prompt >IDL&gt;</span>                               c_ii_rc_data=c_ii_rc_data, h_i_aeff_data=h_i_aeff_data) <span class= code-prompt >IDL&gt;</span> print, 'N(C^2+)/N(H+):', Abund_c_ii <span class= code-output >   N(C^2+)/N(H+):    0.00063404650</span>      type=double. This function returns the ionic abundanc.   ");
  
  

libdata[libdataItem++] = new Array("./calc_abund_c_iii_rl.html", "calc_abund_c_iii_rl.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "calc_abund_c_iii_rl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./calc_abund_c_iii_rl.html#calc_abund_c_iii_rl", "calc_abund_c_iii_rl", 'routine in <a href="./calc_abund_c_iii_rl.html">calc_abund_c_iii_rl.pro</a>', "calc_abund_c_iii_rl.pro", "   Ashkbiz Danehkar   ", "calc_abund_c_iii_rl", "     This function determines the ionic abundance from the observed      flux intensity for the given wavelength of C III recombination line      by using the recombination coefficients from      Pequignot et al. 1991A&A...251..680P.   ", "temperature                         electron temperature  density                         electron density  wavelength                         Line Wavelength in Angstrom  line_flux                         line flux intensity  c_iii_rc_data                         C III recombination coefficients  h_i_aeff_data                         H I recombination coefficients   ", "Abundance Analysis Recombination Lines", "   0.0.3        Based on effective radiative recombination coefficients for C III lines from      Pequignot, Petitjean, Boisson, C. 1991A&A...251..680P.       18/05/2013, A. Danehkar, Translated to IDL code.       06/04/2017, A. Danehkar, Integration with AtomNeb.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_PPB91_file='/media/linux/proEQUIB/AtomNeb-idl/atomic-data-rc/rc_PPB91.fits' <span class= code-prompt >IDL&gt;</span> Atom_RC_SH95_file= filepath('rc_SH95.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> h_i_rc_data=atomneb_read_aeff_sh95(Atom_RC_SH95_file, atom, ion) <span class= code-prompt >IDL&gt;</span> h_i_aeff_data=h_i_rc_data[0].Aeff <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iv' ; C III <span class= code-prompt >IDL&gt;</span> c_iii_rc_data=atomneb_read_aeff_ppb91(Atom_RC_PPB91_file, atom, ion) <span class= code-prompt >IDL&gt;</span> temperature=double(10000.0) <span class= code-prompt >IDL&gt;</span> density=double(5000.0) <span class= code-prompt >IDL&gt;</span> c_iii_4647_flux = 0.107 <span class= code-prompt >IDL&gt;</span> wavelength=4647.42 <span class= code-prompt >IDL&gt;</span> Abund_c_iii=calc_abund_c_iii_rl(temperature=temperature, density=density, $ <span class= code-prompt >IDL&gt;</span>                                 wavelength=wavelength, line_flux=c_iii_4647_flux, $ <span class= code-prompt >IDL&gt;</span>                                 c_iii_rc_data=c_iii_rc_data, h_i_aeff_data=h_i_aeff_data) <span class= code-prompt >IDL&gt;</span> print, 'N(C^3+)/N(H+):', Abund_c_iii <span class= code-output >   N(C^3+)/N(H+):    0.00017502840</span>      type=double. This function returns the ionic abundanc.   ");
  
  

libdata[libdataItem++] = new Array("./calc_abund_he_i_rl.html", "calc_abund_he_i_rl.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "calc_abund_he_i_rl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./calc_abund_he_i_rl.html#calc_abund_he_i_rl", "calc_abund_he_i_rl", 'routine in <a href="./calc_abund_he_i_rl.html">calc_abund_he_i_rl.pro</a>', "calc_abund_he_i_rl.pro", "   Ashkbiz Danehkar   ", "calc_abund_he_i_rl", "     This function determines the ionic abundance from the observed      flux intensity for the given wavelength of He I recombination line      by using the recombination coefficients from Porter et al.      2012MNRAS.425L..28P.   ", "temperature                         electron temperature  density                         electron density  linenum                         Line Number for Wavelength                           Wavelength=4120.84:linenum=7,                           Wavelength=4387.93: linenum=8,                           Wavelength=4437.55: linenum=9,                           Wavelength=4471.50: linenum=10,                           Wavelength=4921.93: linenum=12,                           Wavelength=5015.68: linenum=13,                           Wavelength=5047.74: linenum=14,                           Wavelength=5875.66: linenum=15,                           Wavelength=6678.16: linenum=16,                           Wavelength=7065.25: linenum=17,                           Wavelength=7281.35: linenum=18.   line_flux                         line flux intensity  he_i_aeff_data                         He I recombination coefficients  h_i_aeff_data                         H I recombination coefficients   ", "Abundance Analysis Recombination Lines", "   0.0.3        Based on improved He I emissivities in the case B      from Porter et al. 2012MNRAS.425L..28P       15/12/2013, A. Danehkar, IDL code written.       20/03/2017, A. Danehkar, Integration with AtomNeb.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_He_I_file= filepath('rc_he_ii_PFSD12.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> Atom_RC_SH95_file= filepath('rc_SH95.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> h_i_rc_data=atomneb_read_aeff_sh95(Atom_RC_SH95_file, atom, ion) <span class= code-prompt >IDL&gt;</span> h_i_aeff_data=h_i_rc_data[0].Aeff <span class= code-prompt >IDL&gt;</span> atom='he' <span class= code-prompt >IDL&gt;</span> ion='ii' ; He I <span class= code-prompt >IDL&gt;</span> he_i_rc_data=atomneb_read_aeff_he_i_pfsd12(Atom_RC_He_I_file, atom, ion) <span class= code-prompt >IDL&gt;</span> he_i_aeff_data=he_i_rc_data[0].Aeff <span class= code-prompt >IDL&gt;</span> temperature=double(10000.0) <span class= code-prompt >IDL&gt;</span> density=double(5000.0) <span class= code-prompt >IDL&gt;</span> he_i_4471_flux= 2.104 <span class= code-prompt >IDL&gt;</span> linenum=10; 4471.50 <span class= code-prompt >IDL&gt;</span> Abund_he_i=calc_abund_he_i_rl(temperature=temperature, density=density, $ <span class= code-output >                                  linenum=linenum, line_flux=he_i_4471_flux, $</span> <span class= code-output >                                  he_i_aeff_data=he_i_aeff_data, h_i_aeff_data=h_i_aeff_data)</span> <span class= code-prompt >IDL&gt;</span> print, 'N(He^+)/N(H^+):', Abund_he_i <span class= code-output >   N(He^+)/N(H^+):     0.040848393</span>      type=double. This function returns the ionic abundanc.   ");
  
  

libdata[libdataItem++] = new Array("./calc_abund_he_ii_rl.html", "calc_abund_he_ii_rl.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "calc_abund_he_ii_rl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./calc_abund_he_ii_rl.html#calc_abund_he_ii_rl", "calc_abund_he_ii_rl", 'routine in <a href="./calc_abund_he_ii_rl.html">calc_abund_he_ii_rl.pro</a>', "calc_abund_he_ii_rl.pro", "   Ashkbiz Danehkar   ", "calc_abund_he_ii_rl", "     This function determines the ionic abundance from the observed      flux intensity for the He II recombination line 4686 A      by using the helium emissivities from      Storey & Hummer, 1995MNRAS.272...41S.   ", "temperature                         electron temperature  density                         electron density  line_flux                         line flux intensity  he_ii_aeff_data                         He II recombination coefficients  h_i_aeff_data                         H I recombination coefficients   ", "Abundance Analysis Recombination Lines", "   0.0.3        Based on He II emissivities      from Storey & Hummer, 1995MNRAS.272...41S.       15/12/2013, A. Danehkar, IDL code written.       02/04/2017, A. Danehkar, Integration with AtomNeb.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_He_I_file= filepath('rc_he_ii_PFSD12.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> Atom_RC_SH95_file= filepath('rc_SH95.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> h_i_rc_data=atomneb_read_aeff_sh95(Atom_RC_SH95_file, atom, ion) <span class= code-prompt >IDL&gt;</span> h_i_aeff_data=h_i_rc_data[0].Aeff <span class= code-prompt >IDL&gt;</span> atom='he' <span class= code-prompt >IDL&gt;</span> ion='iii' ; He II <span class= code-prompt >IDL&gt;</span> he_ii_rc_data=atomneb_read_aeff_sh95(Atom_RC_SH95_file, atom, ion) <span class= code-prompt >IDL&gt;</span> he_ii_aeff_data=he_ii_rc_data[0].Aeff <span class= code-prompt >IDL&gt;</span> temperature=double(10000.0) <span class= code-prompt >IDL&gt;</span> density=double(5000.0) <span class= code-prompt >IDL&gt;</span> he_ii_4686_flux = 135.833 <span class= code-prompt >IDL&gt;</span> Abund_he_ii=calc_abund_he_ii_rl(temperature=temperature, density=density, $ <span class= code-prompt >IDL&gt;</span>                                 line_flux=he_ii_4686_flux, $ <span class= code-prompt >IDL&gt;</span>                                 he_ii_aeff_data=he_ii_aeff_data, h_i_aeff_data=h_i_aeff_data) <span class= code-prompt >IDL&gt;</span> print, 'N(He^2+)/N(H^+):', Abund_he_ii <span class= code-output >   N(He^2+)/N(H^+):      0.11228817</span>      type=double. This function returns the ionic abundanc.   ");
  
  

libdata[libdataItem++] = new Array("./calc_abund_n_ii_rl.html", "calc_abund_n_ii_rl.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "calc_abund_n_ii_rl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./calc_abund_n_ii_rl.html#calc_abund_n_ii_rl", "calc_abund_n_ii_rl", 'routine in <a href="./calc_abund_n_ii_rl.html">calc_abund_n_ii_rl.pro</a>', "calc_abund_n_ii_rl.pro", "   Ashkbiz Danehkar   ", "calc_abund_n_ii_rl", "     This function determines the ionic abundance from the observed      flux intensity for the given wavelength of N II recombination line      by using the recombination coefficients from      Escalante & Victor 1990ApJS...73..513E.   ", "temperature                         electron temperature  density                         electron density  wavelength                         Line Wavelength in Angstrom  line_flux                         line flux intensity  n_ii_rc_br                         N II branching ratios (Br)  n_ii_rc_data                         N II recombination coefficients  h_i_aeff_data                         H I recombination coefficients   ", "Abundance Analysis Recombination Lines", "   0.0.3        Based on Effective recombination coefficients for N II lines from      Escalante & Victor 1990ApJS...73..513E.       Adopted from MIDAS Rnii script written by X.W.Liu.       Revised based on scripts by Yong Zhang added to MOCASSIN, 02/2003                        Ercolano et al. 2005MNRAS.362.1038E.       10/05/2013, A. Danehkar, Translated to IDL code.       25/04/2017, A. Danehkar, Integration with AtomNeb.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_All_file= filepath('rc_collection.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> Atom_RC_SH95_file= filepath('rc_SH95.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> h_i_rc_data=atomneb_read_aeff_sh95(Atom_RC_SH95_file, atom, ion) <span class= code-prompt >IDL&gt;</span> h_i_aeff_data=h_i_rc_data[0].Aeff <span class= code-prompt >IDL&gt;</span> atom='n' <span class= code-prompt >IDL&gt;</span> ion='iii' ; N II <span class= code-prompt >IDL&gt;</span> n_ii_rc_data=atomneb_read_aeff_collection(Atom_RC_All_file, atom, ion) <span class= code-prompt >IDL&gt;</span> n_ii_rc_data_br=atomneb_read_aeff_collection(Atom_RC_All_file, atom, ion, /br) <span class= code-prompt >IDL&gt;</span> temperature=double(10000.0) <span class= code-prompt >IDL&gt;</span> density=double(5000.0) <span class= code-prompt >IDL&gt;</span> n_ii_4442_flux = 0.017 <span class= code-prompt >IDL&gt;</span> wavelength=4442.02 <span class= code-prompt >IDL&gt;</span> Abund_n_ii=calc_abund_n_ii_rl(temperature=temperature, density=density, $ <span class= code-prompt >IDL&gt;</span>                               wavelength=wavelength, line_flux=n_ii_4442_flux, $ <span class= code-prompt >IDL&gt;</span>                               n_ii_rc_br=n_ii_rc_data_br, n_ii_rc_data=n_ii_rc_data, $ <span class= code-prompt >IDL&gt;</span>                               h_i_aeff_data=h_i_aeff_data) <span class= code-prompt >IDL&gt;</span> print, 'N(N^2+)/N(H+):', Abund_n_ii <span class= code-output >   N(N^2+)/N(H+):   0.00069297541</span>      type=double. This function returns the ionic abundanc.   ");
  
  

libdata[libdataItem++] = new Array("./calc_abund_n_iii_rl.html", "calc_abund_n_iii_rl.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "calc_abund_n_iii_rl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./calc_abund_n_iii_rl.html#calc_abund_n_iii_rl", "calc_abund_n_iii_rl", 'routine in <a href="./calc_abund_n_iii_rl.html">calc_abund_n_iii_rl.pro</a>', "calc_abund_n_iii_rl.pro", "   Ashkbiz Danehkar   ", "calc_abund_n_iii_rl", "     This function determines the ionic abundance from the observed      flux intensity for the given wavelength of N III recombination line      by using the recombination coefficients from      Pequignot et al. 1991A&A...251..680P.   ", "temperature                         electron temperature  density                         electron density  wavelength                         Line Wavelength in Angstrom  line_flux                         line flux intensity  n_iii_rc_data                         N III recombination coefficients  h_i_aeff_data                         H I recombination coefficients   ", "Abundance Analysis Recombination Lines", "   0.0.3        Based on  effective radiative recombination coefficients for N III lines from      Pequignot, Petitjean, Boisson, C. 1991A&A...251..680P.       10/05/2013, A. Danehkar, IDL code written.       20/04/2017, A. Danehkar, Integration with AtomNeb.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_PPB91_file='/media/linux/proEQUIB/AtomNeb-idl/atomic-data-rc/rc_PPB91.fits' <span class= code-prompt >IDL&gt;</span> Atom_RC_SH95_file= filepath('rc_SH95.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> h_i_rc_data=atomneb_read_aeff_sh95(Atom_RC_SH95_file, atom, ion) <span class= code-prompt >IDL&gt;</span> h_i_aeff_data=h_i_rc_data[0].Aeff <span class= code-prompt >IDL&gt;</span> atom='n' <span class= code-prompt >IDL&gt;</span> ion='iv' ; N III <span class= code-prompt >IDL&gt;</span> n_iii_rc_data=atomneb_read_aeff_ppb91(Atom_RC_PPB91_file, atom, ion) <span class= code-prompt >IDL&gt;</span> temperature=double(10000.0) <span class= code-prompt >IDL&gt;</span> density=double(5000.0) <span class= code-prompt >IDL&gt;</span> n_iii_4641_flux = 0.245 <span class= code-prompt >IDL&gt;</span> wavelength=4640.64 <span class= code-prompt >IDL&gt;</span> Abund_n_iii=calc_abund_n_iii_rl(temperature=temperature, density=density, $ <span class= code-prompt >IDL&gt;</span>                                 wavelength=wavelength, line_flux=n_iii_4641_flux, $ <span class= code-prompt >IDL&gt;</span>                                 n_iii_rc_data=n_iii_rc_data, h_i_aeff_data=h_i_aeff_data) <span class= code-prompt >IDL&gt;</span> print, 'N(N^3+)/N(H+):', Abund_n_iii <span class= code-output >   N(N^3+)/N(H+):    6.3366175e-05</span>      type=double. This function returns the ionic abundanc.   ");
  
  

libdata[libdataItem++] = new Array("./calc_abund_ne_ii_rl.html", "calc_abund_ne_ii_rl.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "calc_abund_ne_ii_rl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./calc_abund_ne_ii_rl.html#calc_abund_ne_ii_rl", "calc_abund_ne_ii_rl", 'routine in <a href="./calc_abund_ne_ii_rl.html">calc_abund_ne_ii_rl.pro</a>', "calc_abund_ne_ii_rl.pro", "   Ashkbiz Danehkar   ", "calc_abund_ne_ii_rl", "     This function determines the ionic abundance from the observed      flux intensity for the given wavelength of Ne II recombination line      by using the recombination coefficients from      Kisielius et al. (1998) & Storey (unpublished).   ", "temperature                         electron temperature  density                         electron density  wavelength                         Line Wavelength in Angstrom  line_flux                         line flux intensity  ne_ii_rc_data                         Ne II recombination coefficients  h_i_aeff_data                         H I recombination coefficients   ", "Abundance Analysis Recombination Lines", "   0.0.3        Based on effective radiative recombination coefficients for Ne II lines      from Kisielius et al. 1998A&AS..133..257K & Storey (unpublished).       Adopted from MOCASSIN, Ercolano et al. 2005MNRAS.362.1038E.       02/2003, Yong Zhang, scripts added to MOCASSIN.       14/05/2013, A. Danehkar, Translated to IDL code.       10/04/2017, A. Danehkar, Integration with AtomNeb.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_All_file= filepath('rc_collection.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> Atom_RC_SH95_file= filepath('rc_SH95.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> h_i_rc_data=atomneb_read_aeff_sh95(Atom_RC_SH95_file, atom, ion) <span class= code-prompt >IDL&gt;</span> h_i_aeff_data=h_i_rc_data[0].Aeff <span class= code-prompt >IDL&gt;</span> atom='ne' <span class= code-prompt >IDL&gt;</span> ion='iii' ; Ne II <span class= code-prompt >IDL&gt;</span> ne_ii_rc_data=atomneb_read_aeff_collection(Atom_RC_All_file, atom, ion) <span class= code-prompt >IDL&gt;</span> temperature=double(10000.0) <span class= code-prompt >IDL&gt;</span> density=double(5000.0) <span class= code-prompt >IDL&gt;</span> ne_ii_3777_flux = 0.056 <span class= code-prompt >IDL&gt;</span> wavelength=3777.14 <span class= code-prompt >IDL&gt;</span> Abund_ne_ii=calc_abund_ne_ii_rl(temperature=temperature, density=density, $ <span class= code-prompt >IDL&gt;</span>                                 wavelength=wavelength, line_flux=ne_ii_3777_flux, $ <span class= code-prompt >IDL&gt;</span>                                 ne_ii_rc_data=ne_ii_rc_data, h_i_aeff_data=h_i_aeff_data) <span class= code-prompt >IDL&gt;</span> print, 'N(Ne^2+)/N(H+):', Abund_ne_ii <span class= code-output >   N(Ne^2+)/N(H+):    0.00043376850</span>      type=double. This function returns the ionic abundanc.   ");
  
  

libdata[libdataItem++] = new Array("./calc_abund_o_ii_rl.html", "calc_abund_o_ii_rl.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "calc_abund_o_ii_rl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./calc_abund_o_ii_rl.html#calc_abund_o_ii_rl", "calc_abund_o_ii_rl", 'routine in <a href="./calc_abund_o_ii_rl.html">calc_abund_o_ii_rl.pro</a>', "calc_abund_o_ii_rl.pro", "   Ashkbiz Danehkar   ", "calc_abund_o_ii_rl", "     This function determines the ionic abundance from the observed      flux intensity for the given wavelength of O II recombination line      by using the recombination coefficients from      Storey 1994A&A...282..999S and Liu et al. 1995MNRAS.272..369L.   ", "temperature                         electron temperature  density                         electron density  wavelength                         Line Wavelength in Angstrom  line_flux                         line flux intensity  o_ii_rc_br                         O II branching ratios (Br)  o_ii_rc_data                         O II recombination coefficients  h_i_aeff_data                         H I recombination coefficients   ", "Abundance Analysis Recombination Lines", "   0.0.3        Based on recombination coefficients for O II lines from      Storey 1994A&A...282..999S and Liu et al. 1995MNRAS.272..369L.       Adopted from MIDAS script Roii.prg written by X.W.Liu.       Revised based on scripts by Yong Zhang added to MOCASSIN, 02/2003                        Ercolano et al. 2005MNRAS.362.1038E.       10/05/2013, A. Danehkar, Translated to IDL code.       25/04/2017, A. Danehkar, Integration with AtomNeb.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_All_file= filepath('rc_collection.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> Atom_RC_SH95_file= filepath('rc_SH95.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> h_i_rc_data=atomneb_read_aeff_sh95(Atom_RC_SH95_file, atom, ion) <span class= code-prompt >IDL&gt;</span> h_i_aeff_data=h_i_rc_data[0].Aeff <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' ; O II <span class= code-prompt >IDL&gt;</span> o_ii_rc_data=atomneb_read_aeff_collection(Atom_RC_All_file, atom, ion) <span class= code-prompt >IDL&gt;</span> o_ii_rc_data_br=atomneb_read_aeff_collection(Atom_RC_All_file, atom, ion, /br) <span class= code-prompt >IDL&gt;</span> temperature=double(10000.0) <span class= code-prompt >IDL&gt;</span> density=double(5000.0) <span class= code-prompt >IDL&gt;</span> o_ii_4614_flux = 0.009 <span class= code-prompt >IDL&gt;</span> wavelength=4613.68 <span class= code-prompt >IDL&gt;</span> Abund_o_ii=calc_abund_o_ii_rl(temperature=temperature, density=density, $ <span class= code-prompt >IDL&gt;</span>                               wavelength=wavelength, line_flux=o_ii_4614_flux, $ <span class= code-prompt >IDL&gt;</span>                               o_ii_rc_br=o_ii_rc_data_br, o_ii_rc_data=o_ii_rc_data, $ <span class= code-prompt >IDL&gt;</span>                               h_i_aeff_data=h_i_aeff_data) <span class= code-prompt >IDL&gt;</span> print, 'N(O^2+)/N(H+):', Abund_o_ii <span class= code-output >   N(O^2+)/N(H+):    0.0018886330</span>      type=double. This function returns the ionic abundanc.   ");
  
  

libdata[libdataItem++] = new Array("./calc_abundance.html", "calc_abundance.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "calc_abundance.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./calc_abundance.html#calc_abundance", "calc_abundance", 'routine in <a href="./calc_abundance.html">calc_abundance.pro</a>', "calc_abundance.pro", "   Ashkbiz Danehkar   ", "calc_abundance", "     This function determines the ionic abundance from the observed      flux intensity for specified ion with level(s)      by solving atomic level populations and      line emissivities in statistical equilibrium      for given electron density and temperature.   ", "temperature                         electron temperature  density                         electron density  line_flux                         line flux intensity  atomic_levels                         level(s) e.g '1,2/', '1,2,1,3/'  elj_data                         energy levels (Ej) data  omij_data                         collision strengths (omega_ij) data  aij_data                         transition probabilities (Aij) data  h_i_aeff_data                         H I recombination coefficients   ", "Abundance Analysis Collisionally Excited Lines", "   0.0.6        15/09/2013, A. Danehkar, Translated from FORTRAN to IDL code.       20/10/2016, A. Danehkar, Replaced str2int with strnumber.       20/10/2016, A. Danehkar, Replaced CFY, SPLMAT, and CFD with           IDL function INTERPOL( /SPLINE).       20/10/2016, A. Danehkar, Replaced LUSLV with IDL LAPACK function                        LA_LINEAR_EQUATION.       15/11/2016, A. Danehkar, Replaced LA_LINEAR_EQUATION (not work in GDL)            with IDL function LUDC & LUSOL.       19/11/2016, A. Danehkar, Replaced INTERPOL (not accurate) with                     SPL_INIT & SPL_INTERP.       20/11/2016, A. Danehkar, Made a new function calc_populations()        for solving atomic level populations and separated it from        calc_abundance(), calc_density() and calc_temperature().       21/11/2016, A. Danehkar, Made a new function calc_emissivity()                       for calculating line emissivities and separated it                       from calc_abundance().       10/03/2017, A. Danehkar, Integration with AtomNeb, now uses atomic data                       input elj_data, omij_data, aij_data.       12/06/2017, A. Danehkar, Cleaning the function, and remove unused varibales                         from calc_abundance().   FORTRAN HISTORY:       03/05/1981, I.D.Howarth,  Version 1.       05/05/1981, I.D.Howarth,  Minibug fixed!       07/05/1981, I.D.Howarth,  Now takes collision rates or strengths.       03/08/1981, S.Adams,      Interpolates collision strengths.       07/08/1981, S.Adams,      Input method changed.       19/11/1984, R.E.S.Clegg,  SA files entombed in scratch disk. Logical                                filenames given to SA's data files.       08/1995, D.P.Ruffle, Changed input file format. Increased matrices.       02/1996, X.W.Liu,   Tidy up. SUBROUTINES SPLMAT, HGEN, CFY and CFD                          modified such that matrix sizes (i.e. maximum                          of Te and maximum no of levels) can now be cha                          by modifying the parameters NDIM1, NDIM2 and N                          in the Main program. EASY!                          Now takes collision rates as well.                          All variables are declared explicitly                          Generate two extra files (ionpop.lis and ionra                          of plain stream format for plotting.       06/1996, C.J.Pritchet, Changed input data format for cases IBIG=1,2.                          Fixed readin bug for IBIG=2 case.                          Now reads reformatted upsilons (easier to see                          and the 0 0 0 data end is excluded for these c                          The A values have a different format for IBIG=.       2006, B.Ercolano,   Converted to F90.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data', 'chianti70'] <span class= code-prompt >IDL&gt;</span> Atom_Elj_file = filepath('AtomElj.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> Atom_Omij_file = filepath('AtomOmij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> Atom_Aij_file = filepath('AtomAij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_SH95_file= filepath('rc_SH95.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> o_iii_elj=atomneb_read_elj(Atom_Elj_file, atom, ion, level_num=5) ; read Energy Levels (Ej) <span class= code-prompt >IDL&gt;</span> o_iii_omij=atomneb_read_omij(Atom_Omij_file, atom, ion) ; read Collision Strengths (Omegaij) <span class= code-prompt >IDL&gt;</span> o_iii_aij=atomneb_read_aij(Atom_Aij_file, atom, ion) ; read Transition Probabilities (Aij) <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> hi_rc_data=atomneb_read_aeff_sh95(Atom_RC_SH95_file, atom, ion) <span class= code-prompt >IDL&gt;</span> h_i_aeff_data=hi_rc_data[0].Aeff <span class= code-prompt >IDL&gt;</span> temperature=double(10000.0) <span class= code-prompt >IDL&gt;</span> density=double(5000.0) <span class= code-prompt >IDL&gt;</span> atomic_levels='3,4/' <span class= code-prompt >IDL&gt;</span> iobs5007=double(1200.0) <span class= code-prompt >IDL&gt;</span> Abb5007=double(0.0) <span class= code-prompt >IDL&gt;</span> Abb5007=calc_abundance(temperature=temperature, density=density, $ <span class= code-prompt >IDL&gt;</span>                        line_flux=iobs5007, atomic_levels=atomic_levels,$ <span class= code-prompt >IDL&gt;</span>                        elj_data=o_iii_elj, omij_data=o_iii_omij, $ <span class= code-prompt >IDL&gt;</span>                        aij_data=o_iii_aij, h_i_aeff_data=hi_rc_data[0].Aeff) <span class= code-prompt >IDL&gt;</span> print, 'N(O^2+)/N(H+):', Abb5007 <span class= code-output >   N(O^2+)/N(H+):   0.00041257847</span>      type=double. This function returns the ionic abundanc.   ");
  
  

libdata[libdataItem++] = new Array("./calc_density.html", "calc_density.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "calc_density.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./calc_density.html#calc_density", "calc_density", 'routine in <a href="./calc_density.html">calc_density.pro</a>', "calc_density.pro", "   Ashkbiz Danehkar   ", "calc_density", "     This function determines electron density from given      flux intensity ratio for specified ion with upper level(s)      lower level(s) by solving atomic level populations and      line emissivities in statistical equilibrium      for given electron temperature.   ", "line_flux_ratio                            flux intensity ratio  temperature                            electron temperature  upper_levels                            upper atomic level(s) e.g '1,2/', '1,2,1,3/'  lower_levels                            lower atomic level(s) e.g '1,2/', '1,2,1,3/'  elj_data                            energy levels (Ej) data  omij_data                            collision strengths (omega_ij) data  aij_data                            transition probabilities (Aij) data   ", "Plasma Diagnostics Collisionally Excited Lines", "   0.0.6        15/09/2013, A. Danehkar, Translated from FORTRAN to IDL code.       20/10/2016, A. Danehkar, Replaced str2int with strnumber.       20/10/2016, A. Danehkar, Replaced CFY, SPLMAT, and CFD with           IDL function INTERPOL( /SPLINE).       20/10/2016, A. Danehkar, Replaced LUSLV with IDL LAPACK function                        LA_LINEAR_EQUATION.       15/11/2016, A. Danehkar, Replaced LA_LINEAR_EQUATION (not work in GDL)            with IDL function LUDC & LUSOL.       19/11/2016, A. Danehkar, Replaced INTERPOL (not accurate) with                     SPL_INIT & SPL_INTERP.       20/11/2016, A. Danehkar, Made a new function calc_populations()        for solving atomic level populations and separated it from        calc_abundance(), calc_density() and calc_temperature().       10/03/2017, A. Danehkar, Integration with AtomNeb, now uses atomic data                       input elj_data, omij_data, aij_data.       12/06/2017, A. Danehkar, Cleaning the function, and remove unused varibales                         from calc_density().   FORTRAN HISTORY:       03/05/1981, I.D.Howarth,  Version 1.       05/05/1981, I.D.Howarth,  Minibug fixed!       07/05/1981, I.D.Howarth,  Now takes collision rates or strengths.       03/08/1981, S.Adams,      Interpolates collision strengths.       07/08/1981, S.Adams,      Input method changed.       19/11/1984, R.E.S.Clegg,  SA files entombed in scratch disk. Logical                                filenames given to SA's data files.       08/1995, D.P.Ruffle, Changed input file format. Increased matrices.       02/1996, X.W.Liu,   Tidy up. SUBROUTINES SPLMAT, HGEN, CFY and CFD                          modified such that matrix sizes (i.e. maximum                          of Te and maximum no of levels) can now be cha                          by modifying the parameters NDIM1, NDIM2 and N                          in the Main program. EASY!                          Now takes collision rates as well.                          All variables are declared explicitly                          Generate two extra files (ionpop.lis and ionra                          of plain stream format for plotting.       06/1996, C.J.Pritchet, Changed input data format for cases IBIG=1,2.                          Fixed readin bug for IBIG=2 case.                          Now reads reformatted upsilons (easier to see                          and the 0 0 0 data end is excluded for these c                          The A values have a different format for IBIG=.       2006, B.Ercolano,   Converted to F90.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data', 'chianti70'] <span class= code-prompt >IDL&gt;</span> Atom_Elj_file = filepath('AtomElj.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> Atom_Omij_file = filepath('AtomOmij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> Atom_Aij_file = filepath('AtomAij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='s' <span class= code-prompt >IDL&gt;</span> ion='ii' <span class= code-prompt >IDL&gt;</span> s_ii_elj=atomneb_read_elj(Atom_Elj_file, atom, ion, level_num=5) ; read Energy Levels (Ej) <span class= code-prompt >IDL&gt;</span> s_ii_omij=atomneb_read_omij(Atom_Omij_file, atom, ion) ; read Collision Strengths (Omegaij) <span class= code-prompt >IDL&gt;</span> s_ii_aij=atomneb_read_aij(Atom_Aij_file, atom, ion) ; read Transition Probabilities (Aij)\ <span class= code-prompt >IDL&gt;</span> upper_levels='1,2/' <span class= code-prompt >IDL&gt;</span> lower_levels='1,3/' <span class= code-prompt >IDL&gt;</span> temperature=double(7000.0); <span class= code-prompt >IDL&gt;</span> line_flux_ratio=double(1.506); <span class= code-prompt >IDL&gt;</span> density=calc_density(line_flux_ratio=line_flux_ratio, temperature=temperature, $ <span class= code-prompt >IDL&gt;</span>                      upper_levels=upper_levels, lower_levels=lower_levels, $ <span class= code-prompt >IDL&gt;</span>                      elj_data=s_ii_elj, omij_data=s_ii_omij, $ <span class= code-prompt >IDL&gt;</span>                      aij_data=s_ii_aij) <span class= code-prompt >IDL&gt;</span> print,  Electron Density: , density <span class= code-output >   Electron Density:       2602.2294</span>      type=double. This function returns the electron density.   ");
  
  

libdata[libdataItem++] = new Array("./calc_emissivity.html", "calc_emissivity.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "calc_emissivity.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./calc_emissivity.html#calc_emissivity", "calc_emissivity", 'routine in <a href="./calc_emissivity.html">calc_emissivity.pro</a>', "calc_emissivity.pro", "   Ashkbiz Danehkar   ", "calc_emissivity", "     This function calculates line emissivities for specified ion with level(s) by      solving atomic level populations and in statistical equilibrium      for given electron density and temperature.   ", "temperature                         electron temperature  density                         electron density  atomic_levels                         level(s) e.g '1,2/', '1,2,1,3/'  elj_data                         energy levels (Ej) data  omij_data                         collision strengths (omega_ij) data  aij_data                         transition probabilities (Aij) data   ", "Abundance Analysis Collisionally Excited Lines", "   0.0.6        15/09/2013, A. Danehkar, Translated from FORTRAN to IDL code.       20/10/2016, A. Danehkar, Replaced str2int with strnumber.       20/10/2016, A. Danehkar, Replaced CFY, SPLMAT, and CFD with           IDL function INTERPOL( /SPLINE).       20/10/2016, A. Danehkar, Replaced LUSLV with IDL LAPACK function                        LA_LINEAR_EQUATION.       15/11/2016, A. Danehkar, Replaced LA_LINEAR_EQUATION (not work in GDL)            with IDL function LUDC & LUSOL.       19/11/2016, A. Danehkar, Replaced INTERPOL (not accurate) with                     SPL_INIT & SPL_INTERP.       20/11/2016, A. Danehkar, Made a new function calc_populations()        for solving atomic level populations and separated it from        calc_abundance(), calc_density() and calc_temperature().       21/11/2016, A. Danehkar, Made a new function calc_emissivity()                       for calculating line emissivities and separated it                       from calc_abundance().       10/03/2017, A. Danehkar, Integration with AtomNeb, now uses atomic data                       input elj_data, omij_data, aij_data.       12/06/2017, A. Danehkar, Cleaning the function, and remove unused varibales                         from calc_emissivity().   FORTRAN HISTORY:       03/05/1981, I.D.Howarth,  Version 1.       05/05/1981, I.D.Howarth,  Minibug fixed!       07/05/1981, I.D.Howarth,  Now takes collision rates or strengths.       03/08/1981, S.Adams,      Interpolates collision strengths.       07/08/1981, S.Adams,      Input method changed.       19/11/1984, R.E.S.Clegg,  SA files entombed in scratch disk. Logical                                filenames given to SA's data files.       08/1995, D.P.Ruffle, Changed input file format. Increased matrices.       02/1996, X.W.Liu,   Tidy up. SUBROUTINES SPLMAT, HGEN, CFY and CFD                          modified such that matrix sizes (i.e. maximum                          of Te and maximum no of levels) can now be cha                          by modifying the parameters NDIM1, NDIM2 and N                          in the Main program. EASY!                          Now takes collision rates as well.                          All variables are declared explicitly                          Generate two extra files (ionpop.lis and ionra                          of plain stream format for plotting.       06/1996, C.J.Pritchet, Changed input data format for cases IBIG=1,2.                          Fixed readin bug for IBIG=2 case.                          Now reads reformatted upsilons (easier to see                          and the 0 0 0 data end is excluded for these c                          The A values have a different format for IBIG=.       2006, B.Ercolano,   Converted to F90.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data', 'chianti70'] <span class= code-prompt >IDL&gt;</span> Atom_Elj_file = filepath('AtomElj.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> Atom_Omij_file = filepath('AtomOmij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> Atom_Aij_file = filepath('AtomAij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> o_iii_elj=atomneb_read_elj(Atom_Elj_file, atom, ion, level_num=5) ; read Energy Levels (Ej) <span class= code-prompt >IDL&gt;</span> o_iii_omij=atomneb_read_omij(Atom_Omij_file, atom, ion) ; read Collision Strengths (Omegaij) <span class= code-prompt >IDL&gt;</span> o_iii_aij=atomneb_read_aij(Atom_Aij_file, atom, ion) ; read Transition Probabilities (Aij) <span class= code-prompt >IDL&gt;</span> temperature=double(10000.0) <span class= code-prompt >IDL&gt;</span> density=double(5000.0) <span class= code-prompt >IDL&gt;</span> atomic_levels='3,4/' <span class= code-prompt >IDL&gt;</span> emiss5007=double(0.0) <span class= code-prompt >IDL&gt;</span> emiss5007=calc_emissivity(temperature=temperature, density=density, $ <span class= code-prompt >IDL&gt;</span>                           atomic_levels=atomic_levels, $ <span class= code-prompt >IDL&gt;</span>                           elj_data=o_iii_elj, omij_data=o_iii_omij, $ <span class= code-prompt >IDL&gt;</span>                           aij_data=o_iii_aij <span class= code-prompt >IDL&gt;</span> print, 'Emissivity(O III 5007):', emiss5007 <span class= code-output >   Emissivity(O III 5007):   3.6039600e-21</span>      type=double. This function returns the line emissivity.   ");
  
  

libdata[libdataItem++] = new Array("./calc_populations.html", "calc_populations.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "calc_populations.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./calc_populations.html#calc_populations", "calc_populations", 'routine in <a href="./calc_populations.html">calc_populations.pro</a>', "calc_populations.pro", "   Ashkbiz Danehkar   ", "calc_populations", "     This function solves atomic level populations in statistical equilibrium      for given electron temperature and density.   ", "temperature                     electron temperature  density                     electron density  temp_list                     temperature intervals (array)  Omij                     Collision Strengths (Omega_ij)  Aij                     Transition Probabilities (A_ij)  Elj                     Energy Levels (E_j)  Glj                     Ground Levels (G_j)  level_num                     Number of levels  temp_num                     Number of temperature intervals  irats                     Else Coll. rates = tabulated values * 10 ** irats   ", "          -1", "   0.0.6        15/09/2013, A. Danehkar, Translated from FORTRAN to IDL code.       20/10/2016, A. Danehkar, Replaced str2int with strnumber.       20/10/2016, A. Danehkar, Replaced CFY, SPLMAT, and CFD with           IDL function INTERPOL( /SPLINE).       20/10/2016, A. Danehkar, Replaced LUSLV with IDL LAPACK function                        LA_LINEAR_EQUATION.       15/11/2016, A. Danehkar, Replaced LA_LINEAR_EQUATION (not work in GDL)            with IDL function LUDC & LUSOL.       19/11/2016, A. Danehkar, Replaced INTERPOL (not accurate) with                     SPL_INIT & SPL_INTERP.       20/11/2016, A. Danehkar, Made a new function calc_populations()        for solving atomic level populations and separated it from        calc_abundance(), calc_density() and calc_temperature().       10/03/2017, A. Danehkar, Integration with AtomNeb, now uses atomic data                       input elj_data, omij_data, aij_data.       12/06/2017, A. Danehkar, Cleaning the function, and remove unused varibales                         from calc_populations().   FORTRAN HISTORY:       03/05/1981, I.D.Howarth,  Version 1.       05/05/1981, I.D.Howarth,  Minibug fixed!       07/05/1981, I.D.Howarth,  Now takes collision rates or strengths.       03/08/1981, S.Adams,      Interpolates collision strengths.       07/08/1981, S.Adams,      Input method changed.       19/11/1984, R.E.S.Clegg,  SA files entombed in scratch disk. Logical                                filenames given to SA's data files.       08/1995, D.P.Ruffle, Changed input file format. Increased matrices.       02/1996, X.W.Liu,   Tidy up. SUBROUTINES SPLMAT, HGEN, CFY and CFD                          modified such that matrix sizes (i.e. maximum                          of Te and maximum no of levels) can now be cha                          by modifying the parameters NDIM1, NDIM2 and N                          in the Main program. EASY!                          Now takes collision rates as well.                          All variables are declared explicitly                          Generate two extra files (ionpop.lis and ionra                          of plain stream format for plotting.       06/1996, C.J.Pritchet, Changed input data format for cases IBIG=1,2.                          Fixed readin bug for IBIG=2 case.                          Now reads reformatted upsilons (easier to see                          and the 0 0 0 data end is excluded for these c                          The A values have a different format for IBIG=.       2006, B.Ercolano,   Converted to F90.     This library is released under a GNU General Public License.       type=array/object. This function returns the atomic level populations.   ");
  
  

libdata[libdataItem++] = new Array("./calc_temperature.html", "calc_temperature.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "calc_temperature.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./calc_temperature.html#calc_temperature", "calc_temperature", 'routine in <a href="./calc_temperature.html">calc_temperature.pro</a>', "calc_temperature.pro", "   Ashkbiz Danehkar   ", "calc_temperature", "     This function determines electron temperature from given      flux intensity ratio for specified ion with upper level(s)      lower level(s) by solving atomic level populations and      line emissivities in statistical equilibrium      for given electron density.   ", "line_flux_ratio                            flux intensity ratio  density                            electron density  upper_levels                            upper atomic level(s) e.g '1,2/', '1,2,1,3/'  lower_levels                            lower atomic level(s) e.g '1,2/', '1,2,1,3/'  elj_data                            energy levels (Ej) data  omij_data                            collision strengths (omega_ij) data  aij_data                            transition probabilities (Aij) data   ", "Plasma Diagnostics Collisionally Excited Lines", "   0.0.6        15/09/2013, A. Danehkar, Translated from FORTRAN to IDL code.       20/10/2016, A. Danehkar, Replaced str2int with strnumber.       20/10/2016, A. Danehkar, Replaced CFY, SPLMAT, and CFD with           IDL function INTERPOL( /SPLINE).       20/10/2016, A. Danehkar, Replaced LUSLV with IDL LAPACK function                        LA_LINEAR_EQUATION.       15/11/2016, A. Danehkar, Replaced LA_LINEAR_EQUATION (not work in GDL)            with IDL function LUDC & LUSOL.       19/11/2016, A. Danehkar, Replaced INTERPOL (not accurate) with                     SPL_INIT & SPL_INTERP.       20/11/2016, A. Danehkar, Made a new function calc_populations()        for solving atomic level populations and separated it from        calc_abundance(), calc_density() and calc_temperature().       10/03/2017, A. Danehkar, Integration with AtomNeb, now uses atomic data                       input elj_data, omij_data, aij_data.       12/06/2017, A. Danehkar, Cleaning the function, and remove unused varibales                         from calc_temperature().   FORTRAN HISTORY:       03/05/1981, I.D.Howarth,  Version 1.       05/05/1981, I.D.Howarth,  Minibug fixed!       07/05/1981, I.D.Howarth,  Now takes collision rates or strengths.       03/08/1981, S.Adams,      Interpolates collision strengths.       07/08/1981, S.Adams,      Input method changed.       19/11/1984, R.E.S.Clegg,  SA files entombed in scratch disk. Logical                                filenames given to SA's data files.       08/1995, D.P.Ruffle, Changed input file format. Increased matrices.       02/1996, X.W.Liu,   Tidy up. SUBROUTINES SPLMAT, HGEN, CFY and CFD                          modified such that matrix sizes (i.e. maximum                          of Te and maximum no of levels) can now be cha                          by modifying the parameters NDIM1, NDIM2 and N                          in the Main program. EASY!                          Now takes collision rates as well.                          All variables are declared explicitly                          Generate two extra files (ionpop.lis and ionra                          of plain stream format for plotting.       06/1996, C.J.Pritchet, Changed input data format for cases IBIG=1,2.                          Fixed readin bug for IBIG=2 case.                          Now reads reformatted upsilons (easier to see                          and the 0 0 0 data end is excluded for these c                          The A values have a different format for IBIG=.       2006, B.Ercolano,   Converted to F90.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data', 'chianti70'] <span class= code-prompt >IDL&gt;</span> Atom_Elj_file = filepath('AtomElj.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> Atom_Omij_file = filepath('AtomOmij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> Atom_Aij_file = filepath('AtomAij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='s' <span class= code-prompt >IDL&gt;</span> ion='ii' <span class= code-prompt >IDL&gt;</span> s_ii_elj=atomneb_read_elj(Atom_Elj_file, atom, ion, level_num=5) ; read Energy Levels (Ej) <span class= code-prompt >IDL&gt;</span> s_ii_omij=atomneb_read_omij(Atom_Omij_file, atom, ion) ; read Collision Strengths (Omegaij) <span class= code-prompt >IDL&gt;</span> s_ii_aij=atomneb_read_aij(Atom_Aij_file, atom, ion) ; read Transition Probabilities (Aij) <span class= code-prompt >IDL&gt;</span> upper_levels='1,2,1,3/' <span class= code-prompt >IDL&gt;</span> lower_levels='1,5/' <span class= code-prompt >IDL&gt;</span> density = double(2550) <span class= code-prompt >IDL&gt;</span> line_flux_ratio=double(10.753) <span class= code-prompt >IDL&gt;</span> temperature=calc_temperature(line_flux_ratio=line_flux_ratio, density=density, $ <span class= code-prompt >IDL&gt;</span>                              upper_levels=upper_levels, lower_levels=lower_levels, $ <span class= code-prompt >IDL&gt;</span>                              elj_data=s_ii_elj, omij_data=s_ii_omij, $ <span class= code-prompt >IDL&gt;</span>                              aij_data=s_ii_aij) <span class= code-prompt >IDL&gt;</span> print,  Electron Temperature: , temperature <span class= code-output >   Electron Temperature:       7920.2865</span>      type=double. This function returns the electron temperature.   ");
  
  

libdata[libdataItem++] = new Array("./deredden_flux.html", "deredden_flux.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "deredden_flux.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./deredden_flux.html#deredden_flux", "deredden_flux", 'routine in <a href="./deredden_flux.html">deredden_flux.pro</a>', "deredden_flux.pro", "   Ashkbiz Danehkar   ", "deredden_flux", "     This function dereddens absolute flux intensity based on the reddening law.   ", "ext_law                the extinction law:                  'GAL' for Howarth Galactic.                  'GAL2' for Savage and Mathis.                  'CCM' for CCM galactic.                  'JBK' for Whitford, Seaton, Kaler.                  'FM' for Fitxpatrick.                  'SMC' for Prevot SMC.                  'LMC' for Howarth LMC.   rv                the optical total-to-selective extinction ratio, RV = A(V)/E(B-V).   fmlaw                the fmlaw keyword is used only in the redlaw_fm function:                  'GAL' for  the default fit parameters for the R-dependent                            Galactic extinction curve from Fitzpatrick & Massa                            (Fitzpatrick, 1999, PASP, 111, 63).                  'LMC2' for the fit parameters are those determined for                               reddening the LMC2 field (inc. 30 Dor)                               from Misselt et al.  (1999, ApJ, 515, 128).                  'AVGLMC' for  the fit parameters are those determined for                               reddening in the general Large Magellanic Cloud (LMC)                               field by Misselt et al.  (1999, ApJ, 515, 128).   wavelength                   Wavelength in Angstrom  flux                   absolute flux intensity  m_ext                   logarithmic extinction   ", "Interstellar Extinction", "   0.0.1        31/08/2012, A. Danehkar, IDL code.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> wavelength=6563.0 <span class= code-prompt >IDL&gt;</span> ext_law='GAL' <span class= code-prompt >IDL&gt;</span> R_V=3.1 <span class= code-prompt >IDL&gt;</span> m_ext=1.0 <span class= code-prompt >IDL&gt;</span> flux=1.0 <span class= code-prompt >IDL&gt;</span> flux_deredden=deredden_flux(wavelength, flux, m_ext, ext_law=ext_law, rv=R_V) ; deredden absolute flux intensity <span class= code-prompt >IDL&gt;</span> print, 'dereddened flux(6563):', flux_deredden <span class= code-output >   dereddened flux(6563):       4.7847785</span>      type=double. This function returns the deredden flux intensity.   ");
  
  

libdata[libdataItem++] = new Array("./deredden_relflux.html", "deredden_relflux.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "deredden_relflux.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./deredden_relflux.html#deredden_relflux", "deredden_relflux", 'routine in <a href="./deredden_relflux.html">deredden_relflux.pro</a>', "deredden_relflux.pro", "   Ashkbiz Danehkar   ", "deredden_relflux", "     This function dereddens flux intensity relative to Hb=100,  based on the reddening law.   ", "ext_law                the extinction law:                  'GAL' for Howarth Galactic.                  'GAL2' for Savage and Mathis.                  'CCM' for CCM galactic.                  'JBK' for Whitford, Seaton, Kaler.                  'FM' for Fitxpatrick.                  'SMC' for Prevot SMC.                  'LMC' for Howarth LMC.   rv                the optical total-to-selective extinction ratio, RV = A(V)/E(B-V).   fmlaw                the fmlaw keyword is used only in the redlaw_fm function:                  'GAL' for  the default fit parameters for the R-dependent                            Galactic extinction curve from Fitzpatrick & Massa                            (Fitzpatrick, 1999, PASP, 111, 63).                  'LMC2' for the fit parameters are those determined for                               reddening the LMC2 field (inc. 30 Dor)                               from Misselt et al.  (1999, ApJ, 515, 128).                  'AVGLMC' for  the fit parameters are those determined for                               reddening in the general Large Magellanic Cloud (LMC)                               field by Misselt et al.  (1999, ApJ, 515, 128).   wavelength                   Wavelength in Angstrom  relflux                   flux intensity relative to Hb=100  m_ext                   logarithmic extinction   ", "Interstellar Extinction", "   0.0.1        31/08/2012, A. Danehkar, IDL code.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> wavelength=6563.0 <span class= code-prompt >IDL&gt;</span> ext_law='GAL' <span class= code-prompt >IDL&gt;</span> R_V=3.1 <span class= code-prompt >IDL&gt;</span> m_ext=1.0 <span class= code-prompt >IDL&gt;</span> flux=1.0 <span class= code-prompt >IDL&gt;</span> flux_deredden=deredden_relflux(wavelength, flux, m_ext, ext_law=ext_law, rv=R_V) ; deredden absolute flux intensity <span class= code-prompt >IDL&gt;</span> print, 'dereddened relative flux(6563):', flux_deredden <span class= code-output >   dereddened relative flux(6563):       0.47847785</span>      type=double. This function returns the deredden flux intensity relative to Hb=100.   ");
  
  

libdata[libdataItem++] = new Array("./gamma_hb_4861.html", "gamma_hb_4861.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "gamma_hb_4861.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./gamma_hb_4861.html#gamma_hb_4861", "gamma_hb_4861", 'routine in <a href="./gamma_hb_4861.html">gamma_hb_4861.pro</a>', "gamma_hb_4861.pro", "   Ashkbiz Danehkar   ", "gamma_hb_4861", "     This function determines the value of gamma(HBeta 4861 A) =      log10(4pi j(HBeta 4861 A)/Np Ne) for the given temperature and density      by using the helium emissivities from      Storey & Hummer, 1995MNRAS.272...41S.   ", "temperature                         electron temperature  density                         electron density  h_i_aeff_data                         H I recombination coefficients   ", "Abundance Analysis Recombination Lines", "   0.0.2        Based on H I emissivities      from Storey & Hummer, 1995MNRAS.272...41S.       25/08/2012, A. Danehkar, IDL code written.       11/03/2017, A. Danehkar, Integration with AtomNeb.     This library is released under a GNU General Public License.       type=double. This function returns the value of gamma(HBeta 4861) = log10(4pi j(HBeta 4861)/Np Ne).   ");
  
  

libdata[libdataItem++] = new Array("./gamma_he_ii_4686.html", "gamma_he_ii_4686.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "gamma_he_ii_4686.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./gamma_he_ii_4686.html#gamma_he_ii_4686", "gamma_he_ii_4686", 'routine in <a href="./gamma_he_ii_4686.html">gamma_he_ii_4686.pro</a>', "gamma_he_ii_4686.pro", "   Ashkbiz Danehkar   ", "gamma_he_ii_4686", "     This function determines the value of gamma(He II 4686 A) =      log10(4pi j(He II 4686 A)/Np Ne) for the given temperature and density      by using the helium emissivities from      Storey & Hummer, 1995MNRAS.272...41S.   ", "temperature                         electron temperature  density                         electron density  he_ii_aeff_data                         He II recombination coefficients   ", "Abundance Analysis Recombination Lines", "   0.0.2        Based on He II emissivities      from Storey & Hummer, 1995MNRAS.272...41S.       31/08/2012, A. Danehkar, IDL code written.       02/03/2017, A. Danehkar, Integration with AtomNeb.     This library is released under a GNU General Public License.       type=double. This function returns the value of gamma(He II 4686) = log10(4pi j(He II 4686)/Np Ne).   ");
  
  

libdata[libdataItem++] = new Array("./redlaw.html", "redlaw.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "redlaw.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./redlaw.html#redlaw", "redlaw", 'routine in <a href="./redlaw.html">redlaw.pro</a>', "redlaw.pro", "   Ashkbiz Danehkar   ", "redlaw", "     This function determines the reddening law function of the line at the given wavelength      for the used extinction law.   ", "ext_law                the extinction law:                  'GAL' for Howarth Galactic.                  'GAL2' for Savage and Mathis.                  'CCM' for CCM galactic.                  'JBK' for Whitford, Seaton, Kaler.                  'FM' for Fitxpatrick.                  'SMC' for Prevot SMC.                  'LMC' for Howarth LMC.   rv                the optical total-to-selective extinction ratio, RV = A(V)/E(B-V).   fmlaw                the fmlaw keyword is used only in the redlaw_fm function:                  'GAL' for  the default fit parameters for the R-dependent                            Galactic extinction curve from Fitzpatrick & Massa                            (Fitzpatrick, 1999, PASP, 111, 63).                  'LMC2' for the fit parameters are those determined for                               reddening the LMC2 field (inc. 30 Dor)                               from Misselt et al.  (1999, ApJ, 515, 128).                  'AVGLMC' for  the fit parameters are those determined for                               reddening in the general Large Magellanic Cloud (LMC)                               field by Misselt et al.  (1999, ApJ, 515, 128).   wavelength                   Wavelength in Angstrom   ", "Interstellar Extinction", "   0.0.1        Originally from IRAF STSDAS SYNPHOT redlaw.x, ebmvxfunc.x       31/08/2012, A. Danehkar, Converted to IDL code.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> wavelength=6563.0 <span class= code-prompt >IDL&gt;</span> R_V=3.1 <span class= code-prompt >IDL&gt;</span> fl=redlaw(wavelength, rv=R_V) <span class= code-prompt >IDL&gt;</span> print, 'fl(6563)', fl <span class= code-output >   fl(6563)     -0.32013816</span>      type=double/array. This function returns the reddening law function value for the given wavelength.   ");
  
  

libdata[libdataItem++] = new Array("./redlaw_ccm.html", "redlaw_ccm.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "redlaw_ccm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./redlaw_ccm.html#redlaw_ccm", "redlaw_ccm", 'routine in <a href="./redlaw_ccm.html">redlaw_ccm.pro</a>', "redlaw_ccm.pro", "   Ashkbiz Danehkar   ", "redlaw_ccm", "    This function determines the reddening law function of Cardelli, Clayton & Mathis.   ", "rv                the optical total-to-selective extinction ratio, RV = A(V)/E(B-V).   wavelength                   Wavelength in Angstrom   ", "Interstellar Extinction", "   0.0.1        Based on Formulae by Cardelli, Clayton & Mathis 1989, ApJ 345, 245-256.      1989ApJ...345..245C       Originally from IRAF STSDAS SYNPHOT redlaw.x       18/05/1993, R. A. Shaw, Initial IRAF implementation, based upon CCM module          in onedspec.deredden.       31/08/2012, A. Danehkar, Converted to IDL code.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> wavelength=6563.0 <span class= code-prompt >IDL&gt;</span> R_V=3.1 <span class= code-prompt >IDL&gt;</span> fl=redlaw_ccm(wavelength, rv=R_V) <span class= code-prompt >IDL&gt;</span> print, 'fl(6563)', fl <span class= code-output >   fl(6563)     -0.29756615</span>      type=double/array. This function returns the reddening law function value for the given wavelength.   ");
  
  

libdata[libdataItem++] = new Array("./redlaw_fm.html", "redlaw_fm.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "redlaw_fm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./redlaw_fm.html#redlaw_fm", "redlaw_fm", 'routine in <a href="./redlaw_fm.html">redlaw_fm.pro</a>', "redlaw_fm.pro", "   Ashkbiz Danehkar   ", "redlaw_fm", "    This function determines the reddening law function by Fitzpatrick & Massa     for the line at the given wavelength.   ", "rv                the optical total-to-selective extinction ratio, RV = A(V)/E(B-V).   fmlaw                the fmlaw keyword is used only in the redlaw_fm function:                  'GAL' for  the default fit parameters for the R-dependent                            Galactic extinction curve from Fitzpatrick & Massa                            (Fitzpatrick, 1999, PASP, 111, 63).                  'LMC2' for the fit parameters are those determined for                               reddening the LMC2 field (inc. 30 Dor)                               from Misselt et al.  (1999, ApJ, 515, 128).                  'AVGLMC' for  the fit parameters are those determined for                               reddening in the general Large Magellanic Cloud (LMC)                               field by Misselt et al.  (1999, ApJ, 515, 128).   wavelength                   Wavelength in Angstrom   ", "Interstellar Extinction", "   0.0.1        Based on Formulae by Fitzpatrick 1999, PASP, 11, 63      1999PASP..111...63F, Fitzpatrick & Massa 1990,      ApJS, 72, 163, 1990ApJS...72..163F       Adopted from NASA IDL Library & PyAstronomy.       30/12/2016, A. Danehkar, Revised in IDL code.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> wavelength=6563.0 <span class= code-prompt >IDL&gt;</span> R_V=3.1 <span class= code-prompt >IDL&gt;</span> fl=redlaw_fm(wavelength, rv=R_V) <span class= code-prompt >IDL&gt;</span> print, 'fl(6563)', fl <span class= code-output >   fl(6563)     -0.35054942</span>      type=double/array. This function returns the reddening law function value for the given wavelength.   ");
  
  

libdata[libdataItem++] = new Array("./redlaw_gal.html", "redlaw_gal.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "redlaw_gal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./redlaw_gal.html#redlaw_gal", "redlaw_gal", 'routine in <a href="./redlaw_gal.html">redlaw_gal.pro</a>', "redlaw_gal.pro", "   Ashkbiz Danehkar   ", "redlaw_gal", "    This function determines the reddening law function of the line at the given wavelength     for Galactic Seaton1979+Howarth1983+CCM1983.   ", "rv                the optical total-to-selective extinction ratio, RV = A(V)/E(B-V).   wavelength                   Wavelength in Angstrom   ", "Interstellar Extinction", "   0.0.1        Based on the UV Formulae from Seaton 1979, MNRAS, 187, 73      1979MNRAS.187P..73S, the opt/NIR from Howarth 1983, MNRAS, 203, 301      the FIR from Cardelli, Clayton and Mathis 1989, ApJ, 345, 245      1989ApJ...345..245C       Originally from IRAF STSDAS SYNPHOT ebmvxfunc.x, pyneb.extinction       31/08/2012, A. Danehkar, Converted to IDL code.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> wavelength=6563.0 <span class= code-prompt >IDL&gt;</span> R_V=3.1 <span class= code-prompt >IDL&gt;</span> fl=redlaw_gal(wavelength, rv=R_V) <span class= code-prompt >IDL&gt;</span> print, 'fl(6563)', fl <span class= code-output >   fl(6563)     -0.32013816</span>      type=double/array. This function returns the reddening law function value(s) for the given wavelength(s).   ");
  
  

libdata[libdataItem++] = new Array("./redlaw_gal2.html", "redlaw_gal2.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "redlaw_gal2.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./redlaw_gal2.html#redlaw_gal2", "redlaw_gal2", 'routine in <a href="./redlaw_gal2.html">redlaw_gal2.pro</a>', "redlaw_gal2.pro", "   Ashkbiz Danehkar   ", "redlaw_gal2", "    This function determines the reddening law function of the line at the given wavelength     for Galactic Savage & Mathis 1979.   ", "wavelength                   Wavelength in Angstrom   ", "Interstellar Extinction", "   0.0.1        Based on Savage & Mathis 1979, ARA&A, vol. 17, 73-111       Originally from IRAF STSDAS SYNPHOT ebmvxfunc.x       20/09/1994, R. A. Shaw, Initial IRAF implementation.       04/03/1995, R. A. Shaw, Return A(lambda)/A(V) instead.       31/08/2012, A. Danehkar, Converted to IDL code.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> wavelength=6563.0 <span class= code-prompt >IDL&gt;</span> fl=redlaw_gal2(wavelength) <span class= code-prompt >IDL&gt;</span> print, 'fl(6563)', fl <span class= code-output >   fl(6563)     -0.30925984</span>      type=double/array. This function returns the reddening law function value(s) for the given wavelength(s).   ");
  
  

libdata[libdataItem++] = new Array("./redlaw_jbk.html", "redlaw_jbk.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "redlaw_jbk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./redlaw_jbk.html#redlaw_jbk", "redlaw_jbk", 'routine in <a href="./redlaw_jbk.html">redlaw_jbk.pro</a>', "redlaw_jbk.pro", "   Ashkbiz Danehkar   ", "redlaw_jbk", "    This function determines the reddening law function for Galactic Whitford1958 + Seaton1977 + Kaler1976.   ", "wavelength                   Wavelength in Angstrom   ", "Interstellar Extinction", "   0.0.1        Based on Whitford (1958), extended to the UV by Seaton (1977),      adapted by Kaler (1976).       Originally from IRAF STSDAS SYNPHOT redlaw.x       13/05/1993, R. A. Shaw, Initial IRAF implementation.       31/08/2012, A. Danehkar, Converted to IDL code.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> wavelength=6563.0 <span class= code-prompt >IDL&gt;</span> fl=redlaw_jbk(wavelength) <span class= code-prompt >IDL&gt;</span> print, 'fl(6563)', fl <span class= code-output >   fl(6563)     -0.33113684</span>      type=double/array. This function returns the reddening law function value(s) for the given wavelength(s).   ");
  
  

libdata[libdataItem++] = new Array("./redlaw_lmc.html", "redlaw_lmc.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "redlaw_lmc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./redlaw_lmc.html#redlaw_lmc", "redlaw_lmc", 'routine in <a href="./redlaw_lmc.html">redlaw_lmc.pro</a>', "redlaw_lmc.pro", "   Ashkbiz Danehkar   ", "redlaw_lmc", "    This function determines the reddening law function of the line at the given wavelength     for the Large Magellanic Cloud.   ", "wavelength                   Wavelength in Angstrom   ", "Interstellar Extinction", "   0.0.1        Based on Formulae by Howarth 1983, MNRAS, 203, 301      1983MNRAS.203..301H       Originally from IRAF STSDAS SYNPHOT ebmvlfunc.x, redlaw.x       18/10/1994, R. A. Shaw, Initial IRAF implementation.       14/03/1995, R. A. Shaw, Return A(lambda)/A(V) instead.       31/08/2012, A. Danehkar, Converted to IDL code.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> wavelength=6563.0 <span class= code-prompt >IDL&gt;</span> fl=redlaw_lmc(wavelength) <span class= code-prompt >IDL&gt;</span> print, 'fl(6563)', fl <span class= code-output >   fl(6563)     -0.30871187</span>      type=double/array. This function returns the reddening law function value(s) for the given wavelength(s).   ");
  
  

libdata[libdataItem++] = new Array("./redlaw_smc.html", "redlaw_smc.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "redlaw_smc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./redlaw_smc.html#redlaw_smc", "redlaw_smc", 'routine in <a href="./redlaw_smc.html">redlaw_smc.pro</a>', "redlaw_smc.pro", "   Ashkbiz Danehkar   ", "redlaw_smc", "    This function determines the reddening law function of the line at the given wavelength     for Small Magellanic Cloud.   ", "wavelength                   Wavelength in Angstrom   ", "Interstellar Extinction", "   0.0.1        Based on Prevot et al. (1984), A&A, 132, 389-392      1984A%26A...132..389P       Originally from IRAF STSDAS SYNPHOT redlaw.x, ebmvxfunc.x       20/09/1994, R. A. Shaw, Initial IRAF implementation.       04/03/1995, R. A. Shaw, Return A(lambda)/A(V) instead.       31/08/2012, A. Danehkar, Converted to IDL code.     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> wavelength=6563.0 <span class= code-prompt >IDL&gt;</span> fl=redlaw_smc(wavelength) <span class= code-prompt >IDL&gt;</span> print, 'fl(6563)', fl <span class= code-output >   fl(6563)     -0.22659261</span>      type=double/array. This function returns the reddening law function value(s) for the given wavelength(s).   ");
  
  

